{"version":3,"sources":["Header.js","NavBar.js","Content.js","Footer.js","App.js","serviceWorker.js","index.js"],"names":["Header","class","React","Component","NavBar","href","Content","id","className","style","textAlign","src","float","height","width","padding","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"yTAceA,G,6KATX,OACE,yBAAKC,MAAM,UACT,6CACA,qE,GALaC,IAAMC,YCaZC,G,6KAXX,OACE,yBAAKH,MAAM,UACT,uBAAGI,KAAK,UAAR,SACA,uBAAGA,KAAK,aAAR,QACA,uBAAGA,KAAK,YAAR,WACA,uBAAGA,KAAK,KAAR,a,GAPaH,IAAMC,YC6CZG,G,6KA3CX,OACE,6BACE,yBAAKC,GAAG,QAAQC,UAAU,OACxB,wBAAIC,MAAO,CAACC,UAAW,WAAvB,cACA,wBAAID,MAAO,CAACC,UAAW,WAAvB,mCACA,6BACE,yBACEC,IAAI,cACJF,MAAO,CAACG,MAAO,OAAQC,OAAQ,QAASC,MAAO,QAASC,QAAS,UAEnE,2nBAGA,8dAKJ,yBAAKR,GAAG,UAAUC,UAAU,OAC1B,wBAAIC,MAAO,CAACC,UAAW,WAAvB,eACA,wBAAID,MAAO,CAACC,UAAW,WAAvB,mBACA,2OACA,yBAAKF,UAAU,OACb,yBAAKA,UAAU,QAAf,uBAGA,yBAAKA,UAAU,QACb,qDACA,2CAEE,6BAFF,4BAIE,6BAJF,gC,GA9BQN,IAAMC,YCUba,G,6KARX,OACE,yBAAKf,MAAM,UACT,2C,GAJaC,IAAMC,Y,MCgBZc,MAXf,WACE,OACE,yBAAKT,UAAU,WACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCFcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.290060c9.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Header.css';\r\n\r\nclass Header extends React.Component {\r\n  render() {\r\n    return(\r\n      <div class=\"header\">\r\n        <h1>Mitali Sawant</h1>\r\n        <p>Allow me to introduce myself.....</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './NavBar.css';\r\n\r\nclass NavBar extends React.Component {\r\n  render() {\r\n    return(\r\n      <div class=\"navbar\">\r\n        <a href=\"#about\">About</a>\r\n        <a href=\"#section2\">Work</a>\r\n        <a href=\"#contact\">Contact</a>\r\n        <a href=\"#\">Blog</a>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React from 'react';\r\nimport './Content.css';\r\n\r\nclass Content extends React.Component {\r\n  render() {\r\n    return(\r\n      <div>\r\n        <div id=\"about\" className=\"row\">\r\n          <h2 style={{textAlign: \"center\"}}>ABOUT ME!!</h2>\r\n          <h4 style={{textAlign: \"center\"}}>Allow me to introduce myself...</h4>\r\n          <div>\r\n            <img\r\n              src=\"smallDp.jpg\"\r\n              style={{float: \"left\", height: \"100px\", width: \"100px\", padding: \"10px\"}}\r\n            />\r\n            <p>\r\n              Hi!! I am a graduate student at the University of San Francisco pursuing a Masterâ€™s degree in Computer Science and am currently seeking an internship for Summer 2020. I am good at java and writing SQL queries and have developed RESTful APIs using the same. I am learning about GCP and to write programs using Apache Beam and Dataflow in java this semester. I am interested and am a good fit for a Backend position at present. I have also taken up courses in Artificial Intelligence and have a few projects under my belt related to it, as a result would be interested in a corresponding role as well.\r\n            </p>\r\n            <p>\r\n              Given device profiles in JSON format, parse the JSON files to extract valid device profiles and aggregate the device profiles to get daily statistics, lifetime statistics and application statistics that were being used by the devices. This was done using Apache Beam, which would work in a distributed system parallelly. This was performed on bounded data, but the same pipeline can be used for streaming data, with Apache Beam's window feature.\r\n            </p>\r\n          </div>\r\n        </div>\r\n        <div id=\"contact\" className=\"row\">\r\n          <h2 style={{textAlign: \"center\"}}>SAY HELLO!!</h2>\r\n          <h4 style={{textAlign: \"center\"}}>Get in touch...</h4>\r\n          <p>I'm currently available for freelance projects or full-time work. If you're interested in working with me, please get in touch using one of the methods below. Or feel free to just say hi. I like that too.</p>\r\n          <div className=\"row\">\r\n            <div className=\"side\">\r\n              Follow me online!!!\r\n            </div>\r\n            <div className=\"main\">\r\n              <h3>Contact me directly!!</h3>\r\n              <p>\r\n                Mitali Sawant\r\n                <br />\r\n                San Francisco, California\r\n                <br />\r\n                mitali0087@gmail.com\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Content;\r\n","import React from 'react';\r\nimport './Footer.css';\r\n\r\nclass Footer extends React.Component {\r\n  render() {\r\n    return(\r\n      <div class=\"footer\">\r\n        <h2>Footer</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\nimport Header from './Header';\nimport NavBar from './NavBar';\nimport Content from './Content';\nimport Footer from './Footer';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"content\">\n      <NavBar />\n      <Header />\n      <Content />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}